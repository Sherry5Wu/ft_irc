Logic:

1. start up the server, start listening;
2. client sents data to server;
3. Server :
   * parses the data;
   * execute the it if it is valid;
   * sents the response

https://datatracker.ietf.org/doc/html/rfc1459#section-1.3.1

For testing:

> nc -C 127.0.0.1 8080

This opens a TCP connection to 127.0.0.1 on port 8080
The -C flag: Send CRLF (\r\n) as line endings instead of just \n.

Channels:

    Channels names are strings (beginning with a '&' or '#' character) of
   length up to 200 characters.  Apart from the the requirement that the
   first character being either '&' or '#'; the only restriction on a
   channel name is that it may not contain any spaces (' '), a control G
   (^G or ASCII 7), or a comma (',' which is used as a list item
   separator by the protocol).

   There are two types of channels: distruibuted channel, which names start with '&'.

    The commands which may only be used by channel operators are:

        KICK    - Eject a client from the channel
        MODE    - Change the channel's mode
        INVITE  - Invite a client to an invite-only channel (mode +i)
        TOPIC   - Change the channel topic in a mode +t channel

    A channel operator is identified by the '@' symbol next to their
    nickname whenever it is associated with a channel (ie replies to the
    NAMES, WHO and WHOIS commands).


2. The IRC Specification

2.2 character codes
    {}  --> []
    |  -->  \

2.3 Messages

    Each IRC message may consist of up to three main parts: the prefix
   (optional), the command, and the command parameters (of which there
   may be up to 15).
   The presence of a prefix is indicated with a single leading ASCII
   colon character (':', 0x3b), which must be the first character of the
   message itself.  There must be no gap (whitespace) between the colon
   and the prefix.  The prefix is used by servers to indicate the true
   origin of the message.

    If the prefix is missing from the message, it
   is assumed to have originated from the connection from which it was
   received.  Clients should not use prefix when sending a message from
   themselves; if they use a prefix, the only valid prefix is the
   registered nickname associated with the client.  If the source
   identified by the prefix cannot be found from the server's internal
   database, or if the source is registered from a different link than
   from which the message arrived, the server must ignore the message
   silently.

   The command must either be a valid IRC command or a three (3) digit
   number represented in ASCII text.

    IRC messages are always lines of characters terminated with a CR-LF
   (Carriage Return - Line Feed) pair, and these messages shall not
   exceed 512 characters in length, counting all characters including
   the trailing CR-LF. Thus, there are 510 characters maximum allowed
   for the command and its parameters.

2.3.1 Message format in 'pseudo' BNF

    The extracted message is parsed into the components <prefix>,
   <command> and list of parameters matched either by <middle> or
   <trailing> components.

   The BNF representation for this is:


    <message>  ::= [':' <prefix> <SPACE> ] <command> <params> <crlf>
    <prefix>   ::= <servername> | <nick> [ '!' <user> ] [ '@' <host> ]
    <command>  ::= <letter> { <letter> } | <number> <number> <number>
    <SPACE>    ::= ' ' { ' ' }
    <params>   ::= <SPACE> [ ':' <trailing> | <middle> <params> ]

    <middle>   ::= <Any *non-empty* sequence of octets not including SPACE
                or NUL or CR or LF, the first of which may not be ':'>
    <trailing> ::= <Any, possibly *empty*, sequence of octets not including
                    NUL or CR or LF>

    <crlf>     ::= CR LF

NOTES:
  4)    The NUL character is not special in message framing, and
        basically could end up inside a parameter, but as it would
        cause extra complexities in normal C string handling. Therefore
        NUL is not allowed within messages.
  6)    Use of the extended prefix (['!' <user> ] ['@' <host> ]) must
        not be used in server to server communications and is only
        intended for server to client messages in order to provide
        clients with more useful information about who a message is
        from without the need for additional queries.

2.4 Numeric replies

   Most of the messages sent to the server generate a reply of some
   sort.  The most common reply is the numeric reply, used for both
   errors and normal replies.  The numeric reply must be sent as one
   message consisting of the sender prefix, the three digit numeric, and
   the target of the reply.  A numeric reply is not allowed to originate
   from a client; any such messages received by a server are silently
   dropped. In all other respects, a numeric reply is just like a normal
   message, except that the keyword is made up of 3 numeric digits
   rather than a string of letters.  A list of different replies is
   supplied in section 6.


3. IRC Concepts.

3.3.2 Client-to-Server

   Most of the commands which result in a change of state information
   (such as channel membership, channel mode, user status, etc) must be
   sent to all servers by default, and this distribution may not be
   changed by the client.

4. Message details

   On the following pages are descriptions of each message recognized by
   the IRC server and client.  All commands described in this section
   must be implemented by any server for this protocol.

   Where the reply ERR_NOSUCHSERVER is listed, it means that the
   <server> parameter could not be found.  The server must not send any
   other replies after this for that command.

   The server to which a client is connected is required to parse the
   complete message, returning any appropriate errors.  If the server
   encounters a fatal error while parsing a message, an error must be
   sent back to the client and the parsing terminated.  A fatal error
   may be considered to be incorrect command, a destination which is
   otherwise unknown to the server (server, nick or channel names fit
   this category), not enough parameters or incorrect privileges.

   If a full set of parameters is presented, then each must be checked
   for validity and appropriate responses sent back to the client.  In
   the case of messages which use parameter lists using the comma as an
   item separator, a reply must be sent for each item.

    In the examples below, some messages appear using the full format:

   :Name COMMAND parameter list

   Such examples represent a message from "Name" in transit between
   servers, where it is essential to include the name of the original
   sender of the message so remote servers may send back a reply along
   the correct path.

4.1 Connection Registration

   The commands described here are used to register a connection with an
   IRC server as either a user or a server as well as correctly
   disconnect.

   A "PASS" command is not required for either client or server
   connection to be registered, but it must precede the server message
   or the latter of the NICK/USER combination.  It is strongly
   recommended that all server connections have a password in order to
   give some level of security to the actual connections.  The
   recommended order for a client to register is as follows:

        1. Pass message
        2. Nick message
        3. User message
PASS secretpasswordhere

4.1.2 Nick message

      Command: NICK
   Parameters: <nickname> [ <hopcount> ]

   NICK message is used to give user a nickname or change the previous
   one.  The <hopcount> parameter is only used by servers to indicate
   how far away a nick is from its home server.  A local connection has
   a hopcount of 0.  If supplied by a client, it must be ignored.

   If a NICK message arrives at a server which already knows about an
   identical nickname for another client, a nickname collision occurs.
   As a result of a nickname collision, all instances of the nickname
   are removed from the server's database, and a KILL command is issued
   to remove the nickname from all other server's database. If the NICK
   message causing the collision was a nickname change, then the
   original (old) nick must be removed as well.

   If the server recieves an identical NICK from a client which is
   directly connected, it may issue an ERR_NICKCOLLISION to the local
   client, drop the NICK command, and not generate any kills.

   Numeric Replies:

           ERR_NONICKNAMEGIVEN             ERR_ERRONEUSNICKNAME
           ERR_NICKNAMEINUSE               ERR_NICKCOLLISION

   Example:

   NICK Wiz                        ; Introducing new nick "Wiz".

   :WiZ NICK Kilroy                ; WiZ changed his nickname to Kilroy.
问题回顾：
如果两个服务器之间发生昵称冲突（nick collision），服务器会从数据库中移除昵称并清理对应客户端，这会导致数据丢失吗？

简短回答：
是的，有可能会造成数据丢失，但这是 IRC 协议为了保持网络一致性而做出的折中选择。

更详细的解释：
当两个服务器中存在相同昵称的两个不同用户时，就会发生昵称冲突。

IRC 协议的设计原则之一是：昵称在整个 IRC 网络中必须唯一。所以如果两个服务器都出现了相同昵称的用户，这被视为一种严重的异常情况。

处理流程如下：
服务器检测到昵称冲突。

冲突涉及的所有客户端都会被从服务器“踢掉”（KILL 掉）。

所有服务器会同步这个行为，确保网络中没有人再使用这个昵称。

对应的客户端必须重新连接并重新选择昵称。

可能造成的数据丢失：
客户端被 KILL 掉后，当前正在进行的聊天、传输、频道状态等信息就会丢失。

用户需要重新加入频道，重新建立会话。

如果没有客户端本地保存，部分聊天记录、操作状态确实会丢失。

为什么要这么做？
IRC 网络是由多个服务器组成的分布式系统，为了避免昵称重复导致状态不一致（比如你以为你在跟某个用户聊天，其实是另一个人），协议选择了“宁可清掉所有冲突用户，也要保持一致性”的做法。

这虽然会造成用户体验受影响、甚至有数据丢失的风险，但它保证了整个网络状态的一致性，这是分布式系统中一个非常重要的目标。

IRC 网络是分布式的，每个服务器都维护一份全网用户列表的视图，以便能够：

检查昵称是否冲突。

发送私聊消息或频道消息时，知道用户在哪个服务器。

同步用户状态和事件（比如 JOIN、QUIT、PRIVMSG）。

每个用户记录通常包括：
昵称（nick）

用户名（username）

主机（host）

来源服务器（server name）✅

状态（是否在线、所在频道等）

用户连接的 socket / descriptor（如果是本地连接）

这些用户信息会被保存在**一个全局用户表（user hash table）**或类似的数据结构中，并不是简单按服务器分隔多个列表。


